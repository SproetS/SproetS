<?php

/**
 * @file
 * Functions to support theming in the sproets theme.
 */

use Drupal\Component\Utility\SafeMarkup;
use Drupal\node\Entity\Node;

/**
 * Implements hook_preprocess_HOOK() for HTML document templates.
 */
function sproets_preprocess_html(&$variables) {

  /* Add class to html tag */
  //$variables['html_attributes']->addClass('no-js');

  // Don't display the site name twice on the front page (and potentially others)
  /*if (isset($variables['head_title_array']['title']) && isset($variables['head_title_array']['name']) && ($variables['head_title_array']['title'] == $variables['head_title_array']['name'])) {
    $variables['head_title'] = $variables['head_title_array']['name'];
  }*/
}

/**
* Implements hook_page_attachments_alter
*/
function sproets_page_attachments_alter(array &$page) {
    // Disabling browser zoom on mobile devices.
    /*foreach ($page['#attached']['html_head'] as &$meta_arr) {
        if (array_search('viewport', $meta_arr)) {
          $meta_arr[0]['#attributes']['content'] .= ', maximum-scale=1.0, user-scalable=0';
        }
    }*/


    // Tell IE to use latest rendering engine (not to use compatibility mode).
    /*$ie_edge = array(
        '#type' => 'html_tag',
        '#tag' => 'meta',
        '#attributes' => array(
        'http-equiv' => 'X-UA-Compatible',
        'content' => 'IE=edge',
        ),
    );
    $page['#attached']['html_head'][] = [$ie_edge, 'ie_edge'];*/
}

/**
* Implements hook_preprocess_page() for PAGE document templates.
*/
function sproets_preprocess_page(&$variables) {

}

/**
* Implements hook_theme_suggestions_page_alter().
*/
function sproets_theme_suggestions_page_alter(array &$suggestions, array $variables) {

}

/**
* Implements hook_theme_suggestions_node_alter().
*/
function sproets_theme_suggestions_node_alter(array &$suggestions, array $variables) {
    /*$node = $variables['elements']['#node'];

    if ($variables['elements']['#view_mode'] == "full") {

    }*/
}

/**
* Implements hook_preprocess_HOOK() for Block document templates.
*/
function sproets_preprocess_block(&$variables) {

}

/**
* Implements hook_theme_suggestions_field_alter().
*/
function sproets_theme_suggestions_field_alter(array &$suggestions, array $variables) {
    /*$element = $variables['element'];

    $suggestions[] = 'field__' . $element['#view_mode'];
    $suggestions[] = 'field__' . $element['#view_mode'] . '__' . $element['#field_name'];*/
}

/**
* Implements hook_theme_suggestions_field_alter().
*/
function sproets_theme_suggestions_fieldset_alter(array &$suggestions, array $variables) {
    /*$element = $variables['element'];
    if (isset($element['#attributes']['class']) && in_array('form-composite', $element['#attributes']['class'])) {
    $suggestions[] = 'fieldset__form_composite';
    }*/
}

/**
* Implements hook_preprocess_node().
*/
function sproets_preprocess_node(&$variables) {
    // Default to turning off byline/submitted.
    //$variables['display_submitted'] = FALSE;
}

/**
* Implements hook_theme_suggestions_views_view_alter().
*/
function sproets_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {

}

/**
* Implements hook_preprocess_form().
*/
function sproets_preprocess_form(&$variables) {
    //$variables['attributes']['novalidate'] = 'novalidate';
}

/**
* Implements hook_preprocess_select().
*/
function sproets_preprocess_select(&$variables) {
    //$variables['attributes']['class'][] = 'select-chosen';
}

/**
* Implements hook_preprocess_field().
*/
function sproets_preprocess_field(&$variables, $hook) {
    /*switch ($variables['element']['#field_name']) {
    }*/
}

/**
* Implements hook_preprocess_details().
*/
function sproets_preprocess_details(&$variables) {
    /*$variables['attributes']['class'][] = 'details';
    $variables['summary_attributes']['class'] = 'summary';*/
}

/**
* Implements hook_theme_suggestions_details_alter().
*/
function sproets_theme_suggestions_details_alter(array &$suggestions, array $variables) {

}

/**
* Implements hook_preprocess_menu_local_task().
*/
function sproets_preprocess_menu_local_task(&$variables) {
    //$variables['element']['#link']['url']->setOption('attributes', array('class'=>'rounded'));
}

/**
 * Implements hook_pre_render_HOOK() for menu-local-tasks templates.
 *
 * Use preprocess hook to set #attached to child elements
 * because they will be processed by Twig and drupal_render will
 * be invoked.
 */
function seven_preprocess_menu_local_tasks(&$variables) {
  if (!empty($variables['primary'])) {
    $variables['primary']['#attached'] = array(
      'library' => array(
        'seven/drupal.nav-tabs',
      ),
    );
  }
  elseif (!empty($variables['secondary'])) {
    $variables['secondary']['#attached'] = array(
      'library' => array(
        'seven/drupal.nav-tabs',
      ),
    );
  }
}

/**
 * Implements hook_preprocess_HOOK() for menu-local-task templates.
 */
function seven_preprocess_menu_local_task(&$variables) {
  $variables['attributes']['class'][] = 'tabs__tab';
}

/**
 * Implements hook_preprocess_HOOK() for list of available node type templates.
 */
function seven_preprocess_node_add_list(&$variables) {
  if (!empty($variables['content'])) {
    /** @var \Drupal\node\NodeTypeInterface $type */
    foreach ($variables['content'] as $type) {
      $variables['types'][$type->id()]['label'] = $type->label();
      $variables['types'][$type->id()]['url'] = \Drupal::url('node.add', array('node_type' => $type->id()));
    }
  }
}
/**
 * Implements hook_preprocess_HOOK() for menu-local-action templates.
 */
function seven_preprocess_menu_local_action(array &$variables) {
  $variables['link']['#options']['attributes']['class'][] = 'button--primary';
  $variables['link']['#options']['attributes']['class'][] = 'button--small';

  // We require Modernizr's touch test for button styling.
  $variables['#attached']['library'][] = 'core/modernizr';
}


